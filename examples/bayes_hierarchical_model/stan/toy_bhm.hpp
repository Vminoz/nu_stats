
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace toy_bhm_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 32, column 2 to column 31)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 34, column 2 to column 30)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 36, column 2 to column 35)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 38, column 2 to column 42)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 44, column 2 to column 27)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 45, column 2 to column 13)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 46, column 2 to column 14)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 47, column 2 to column 11)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 48, column 2 to column 16)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 49, column 2 to column 24)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 50, column 2 to column 17)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 52, column 2 to column 37)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 53, column 2 to column 40)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 55, column 2 to column 15)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 56, column 2 to column 16)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 58, column 2 to column 21)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 64, column 4 to column 25)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 70, column 6 to column 68)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 88, column 1 to column 33)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 91, column 1 to column 37)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 85, column 23 to line 93, column 7)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 85, column 11 to line 93, column 7)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 77, column 1 to column 30)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 80, column 1 to column 60)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 74, column 18 to line 82, column 7)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 74, column 6 to line 93, column 7)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 96, column 6 to column 68)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 67, column 19 to line 98, column 5)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 67, column 4 to line 98, column 5)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 61, column 17 to line 100, column 3)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 61, column 2 to line 100, column 3)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 102, column 2 to column 53)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 103, column 2 to column 24)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 112, column 4 to column 39)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 110, column 17 to line 114, column 3)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 110, column 2 to line 114, column 3)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 117, column 2 to column 17)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 118, column 2 to column 13)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 121, column 2 to column 30)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 122, column 2 to column 35)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 123, column 2 to column 23)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 12, column 2 to column 8)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 13, column 9 to column 10)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 13, column 2 to column 17)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 14, column 25 to column 26)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 14, column 2 to column 28)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 17, column 2 to column 28)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 18, column 2 to column 9)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 19, column 2 to column 9)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 20, column 2 to column 12)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 21, column 2 to column 12)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 22, column 2 to column 12)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 25, column 2 to column 9)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 26, column 2 to column 13)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 27, column 2 to column 12)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 38, column 33 to column 34)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 49, column 21 to column 22)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 50, column 9 to column 10)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 13, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 14, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 16, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 18, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 17, column 17, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 17, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 20, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 21, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 11, column 34, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 30, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 31, column 9, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 31, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 32, column 9, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 32, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 33, column 9, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 33, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 36, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 35, column 19, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 35, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 39, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 40, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 42, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 28, column 44, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 52, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 53, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 54, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 55, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 57, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 58, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 59, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 60, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 62, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 63, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 64, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 66, column 6, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 65, column 57, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 65, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 61, column 17, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 61, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 70, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 50, column 44, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 79, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 80, column 9, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 80, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 82, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 83, column 9, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 83, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 85, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 86, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 77, column 38, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 96, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 97, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 98, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 99, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 100, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 102, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 103, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 104, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 106, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 94, column 31, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 117, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 118, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 119, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 121, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 122, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 124, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 125, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 126, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 128, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 115, column 47, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 140, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 145, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 144, column 7, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 142, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 141, column 19, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 141, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 147, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/vMF.stan', line 138, column 47, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 15, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 25, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 23, column 7, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 19, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 17, column 19, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 17, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 37, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 35, column 7, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 31, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 29, column 19, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 29, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 41, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 12, column 49, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 50, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 52, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 53, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 55, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 48, column 77, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 64, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 65, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 67, column 17, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 67, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 73, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 62, column 35, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 81, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 82, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 91, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 89, column 7, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 86, column 4, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 84, column 19, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 84, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 95, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 97, column 2, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/utils.stan', line 79, column 62, included from\n'/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan/toy_bhm.stan', line 5, column 0)"};


template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
abs_val(const T0__& input_vector_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& input_vector = to_ref(input_vector_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ av;
    av = DUMMY_VAR__;
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 60;
    n = num_elements(input_vector);
    local_scalar_t__ sum_squares;
    sum_squares = DUMMY_VAR__;
    
    current_statement__ = 61;
    sum_squares = 0;
    current_statement__ = 64;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 62;
      sum_squares = (sum_squares +
                      (input_vector[(i - 1)] * input_vector[(i - 1)]));}
    current_statement__ = 65;
    av = stan::math::sqrt(sum_squares);
    current_statement__ = 66;
    return av;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct abs_val_functor__ {
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
operator()(const T0__& input_vector, std::ostream* pstream__)  const 
{
return abs_val(input_vector, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
sample_orthonormal_to_rng(const T0__& mu_arg__, RNG& base_rng__,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& mu = to_ref(mu_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 68;
    dim = num_elements(mu);
    current_statement__ = 69;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 71;
    validate_non_negative_index("proj_mu_v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> proj_mu_v;
    proj_mu_v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(proj_mu_v, DUMMY_VAR__);
    
    current_statement__ = 73;
    validate_non_negative_index("orthto", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> orthto;
    orthto = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(orthto, DUMMY_VAR__);
    
    current_statement__ = 77;
    for (int i = 1; i <= dim; ++i) {
      current_statement__ = 75;
      assign(v, cons_list(index_uni(i), nil_index_list()),
        normal_rng(0, 1, base_rng__), "assigning variable v");}
    current_statement__ = 78;
    assign(proj_mu_v, nil_index_list(),
      divide(multiply(mu, dot_product(mu, v)), abs_val(mu, pstream__)),
      "assigning variable proj_mu_v");
    current_statement__ = 79;
    assign(orthto, nil_index_list(), subtract(v, proj_mu_v),
      "assigning variable orthto");
    current_statement__ = 80;
    return divide(orthto, abs_val(orthto, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_orthonormal_to_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& mu, RNG& base_rng__, std::ostream* pstream__)  const 
{
return sample_orthonormal_to_rng(mu, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
sample_weight_rng(const T0__& kappa, const int& dim, RNG& base_rng__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ sdim;
    sdim = DUMMY_VAR__;
    
    current_statement__ = 82;
    sdim = (dim - 1);
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 83;
    b = (sdim /
          (stan::math::sqrt(((4. * pow(kappa, 2)) + pow(sdim, 2))) +
            (2 * kappa)));
    local_scalar_t__ x;
    x = DUMMY_VAR__;
    
    current_statement__ = 84;
    x = ((1 - b) / (1 + b));
    local_scalar_t__ c;
    c = DUMMY_VAR__;
    
    current_statement__ = 85;
    c = ((kappa * x) + (sdim * stan::math::log((1 - pow(x, 2)))));
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 86;
    i = 0;
    local_scalar_t__ z;
    z = DUMMY_VAR__;
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 97;
    while (logical_eq(i, 0)) {
      current_statement__ = 90;
      z = beta_rng((sdim / 2), (sdim / 2), base_rng__);
      current_statement__ = 91;
      w = ((1 - ((1 + b) * z)) / (1 - ((1 - b) * z)));
      current_statement__ = 92;
      u = uniform_rng(0, 1, base_rng__);
      current_statement__ = 95;
      if (logical_gte(
            (((kappa * w) + (sdim * stan::math::log((1 - (x * w))))) - c),
            stan::math::log(u))) {
        current_statement__ = 93;
        i = 1;
      } 
    }
    current_statement__ = 98;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_weight_rng_functor__ {
template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
operator()(const T0__& kappa, const int& dim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_weight_rng(kappa, dim, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
vMF_rng(const T0__& mu_arg__, const T1__& kappa, RNG& base_rng__,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& mu = to_ref(mu_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 100;
    dim = num_elements(mu);
    current_statement__ = 101;
    validate_non_negative_index("result", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    current_statement__ = 103;
    w = sample_weight_rng(kappa, dim, base_rng__, pstream__);
    current_statement__ = 104;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 105;
    assign(v, nil_index_list(),
      sample_orthonormal_to_rng(mu, base_rng__, pstream__),
      "assigning variable v");
    current_statement__ = 106;
    assign(result, nil_index_list(),
      add(multiply(v, stan::math::sqrt((1 - pow(w, 2)))), multiply(w, mu)),
      "assigning variable result");
    current_statement__ = 107;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& mu, const T1__& kappa, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return vMF_rng(mu, kappa, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sphere_rng(const T0__& radius, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 110;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 111;
    v = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 112;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 113;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 114;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 115;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 116;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 117;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& radius, RNG& base_rng__, std::ostream* pstream__)  const 
{
return sphere_rng(radius, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
sphere_lim_rng(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 120;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 121;
    v = uniform_rng(v_lim, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 122;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 123;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 124;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 125;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 126;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 127;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_lim_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sphere_lim_rng(radius, v_lim, base_rng__, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>
vMF_lpdf(const T0__& v_arg__, const T1__& mu_arg__, const T2__& kappa,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  const auto& v = to_ref(v_arg__);
  const auto& mu = to_ref(mu_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lprob;
    lprob = DUMMY_VAR__;
    
    current_statement__ = 134;
    if (logical_gt(kappa, 100)) {
      current_statement__ = 132;
      lprob = (((((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                  stan::math::log((4 * stan::math::pi()))) - kappa) +
                stan::math::log(2));
    } else {
      current_statement__ = 130;
      lprob = (((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                stan::math::log(
                  ((4 * stan::math::pi()) * stan::math::sinh(kappa))));
    }
    current_statement__ = 135;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>
operator()(const T0__& v, const T1__& mu, const T2__& kappa,
           std::ostream* pstream__)  const 
{
return vMF_lpdf<propto__>(v, mu, kappa, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>
interpolate(const T0__& x_values_arg__, const T1__& y_values_arg__,
            const T2__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  const auto& x_values = to_ref(x_values_arg__);
  const auto& y_values = to_ref(y_values_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 142;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 143;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 144;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 145;
    i = 1;
    current_statement__ = 153;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 151;
      if (logical_gt(x, xmax)) {
        current_statement__ = 149;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 148;
        if (logical_lt(x, xmin)) {
          current_statement__ = 146;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 160;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 158;
      i = (Nx - 1);
    } else {
      current_statement__ = 156;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 154;
        i = (i + 1);
      }
    }
    current_statement__ = 161;
    x_left = x_values[(i - 1)];
    current_statement__ = 162;
    y_left = y_values[(i - 1)];
    current_statement__ = 163;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 164;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 165;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 166;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>
operator()(const T0__& x_values, const T1__& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
flux_conv(const T0__& gamma, const T1__& e_low, const T2__& e_up,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ f1;
    f1 = DUMMY_VAR__;
    
    local_scalar_t__ f2;
    f2 = DUMMY_VAR__;
    
    current_statement__ = 174;
    if (logical_eq(gamma, 1.0)) {
      current_statement__ = 172;
      f1 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 170;
      f1 = ((1.0 / (1.0 - gamma)) *
             (pow(e_up, (1.0 - gamma)) - pow(e_low, (1.0 - gamma))));
    }
    current_statement__ = 179;
    if (logical_eq(gamma, 2.0)) {
      current_statement__ = 177;
      f2 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 175;
      f2 = ((1.0 / (2.0 - gamma)) *
             (pow(e_up, (2.0 - gamma)) - pow(e_low, (2.0 - gamma))));
    }
    current_statement__ = 180;
    return (f1 / f2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct flux_conv_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& gamma, const T1__& e_low, const T2__& e_up,
           std::ostream* pstream__)  const 
{
return flux_conv(gamma, e_low, e_up, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
get_exposure_factor(const T0__& gamma, const T1__& T, const T2__& aeff,
                    const T3__& z, const T4__& z_bg, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 183;
    assign(eps, cons_list(index_uni(1), nil_index_list()),
      ((T * aeff) * pow((1 + z), -gamma)), "assigning variable eps");
    current_statement__ = 184;
    assign(eps, cons_list(index_uni(2), nil_index_list()),
      ((T * aeff) * pow((1 + z_bg), -gamma)), "assigning variable eps");
    current_statement__ = 185;
    return eps;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
operator()(const T0__& gamma, const T1__& T, const T2__& aeff, const T3__& z,
           const T4__& z_bg, std::ostream* pstream__)  const 
{
return get_exposure_factor(gamma, T, aeff, z, z_bg, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
get_Nex(const T0__& F_arg__, const T1__& eps_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& F = to_ref(F_arg__);
  const auto& eps = to_ref(eps_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 187;
    K = num_elements(eps);
    local_scalar_t__ Nex;
    Nex = DUMMY_VAR__;
    
    current_statement__ = 188;
    Nex = 0;
    current_statement__ = 191;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 189;
      Nex = (Nex + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 192;
    return Nex;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Nex_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& F, const T1__& eps, std::ostream* pstream__)  const 
{
return get_Nex(F, eps, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
spectrum_lpdf(const T0__& E, const T1__& gamma, const T2__& e_low,
              const T3__& e_up, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ N;
    N = DUMMY_VAR__;
    
    local_scalar_t__ p;
    p = DUMMY_VAR__;
    
    current_statement__ = 200;
    if (logical_eq(gamma, 1.0)) {
      current_statement__ = 198;
      N = (1.0 / (stan::math::log(e_up) - stan::math::log(e_low)));
    } else {
      current_statement__ = 196;
      N = ((1.0 - gamma) /
            (pow(e_up, (1.0 - gamma)) - pow(e_low, (1.0 - gamma))));
    }
    current_statement__ = 201;
    p = (N * pow(E, (gamma * -1)));
    current_statement__ = 202;
    return stan::math::log(p);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct spectrum_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& E, const T1__& gamma, const T2__& e_low,
           const T3__& e_up, std::ostream* pstream__)  const 
{
return spectrum_lpdf<propto__>(E, gamma, e_low, e_up, pstream__);
}
};

class toy_bhm_model final : public model_base_crtp<toy_bhm_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> Edet;
  std::vector<Eigen::Matrix<double, -1, 1>> det_dir;
  Eigen::Matrix<double, -1, 1> source_dir;
  double D;
  double z;
  double z_bg;
  double Emin;
  double Emax;
  double T;
  double kappa;
  double aeff;
 
 public:
  ~toy_bhm_model() { }
  
  inline std::string model_name() const final { return "toy_bhm_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = --include_paths=/Users/fran/projects/nu_stats/examples/bayes_hierarchical_model/stan"};
  }
  
  
  toy_bhm_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "toy_bhm_model_namespace::toy_bhm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 42;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 42;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 43;
      validate_non_negative_index("Edet", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","Edet","double",
          context__.to_vec(N));
      Edet = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Edet, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Edet_flat__;
        current_statement__ = 44;
        assign(Edet_flat__, nil_index_list(), context__.vals_r("Edet"),
          "assigning variable Edet_flat__");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 44;
          assign(Edet, cons_list(index_uni(sym1__), nil_index_list()),
            Edet_flat__[(pos__ - 1)], "assigning variable Edet");
          current_statement__ = 44;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 45;
      validate_non_negative_index("det_dir", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","det_dir","double",
          context__.to_vec(N, 3));
      det_dir = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(det_dir, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> det_dir_flat__;
        current_statement__ = 46;
        assign(det_dir_flat__, nil_index_list(), context__.vals_r("det_dir"),
          "assigning variable det_dir_flat__");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 46;
            assign(det_dir,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              det_dir_flat__[(pos__ - 1)], "assigning variable det_dir");
            current_statement__ = 46;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 46;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 46;
        current_statement__ = 46;
        check_unit_vector(function__, "det_dir[sym1__]",
                          det_dir[(sym1__ - 1)]);}
      current_statement__ = 47;
      context__.validate_dims("data initialization","source_dir","double",
          context__.to_vec(3));
      source_dir = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(source_dir, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> source_dir_flat__;
        current_statement__ = 47;
        assign(source_dir_flat__, nil_index_list(),
          context__.vals_r("source_dir"),
          "assigning variable source_dir_flat__");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 47;
          assign(source_dir, cons_list(index_uni(sym1__), nil_index_list()),
            source_dir_flat__[(pos__ - 1)], "assigning variable source_dir");
          current_statement__ = 47;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 47;
      current_statement__ = 47;
      check_unit_vector(function__, "source_dir", source_dir);
      current_statement__ = 48;
      context__.validate_dims("data initialization","D","double",
          context__.to_vec());
      D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 48;
      D = context__.vals_r("D")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization","z","double",
          context__.to_vec());
      z = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      z = context__.vals_r("z")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","z_bg","double",
          context__.to_vec());
      z_bg = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      z_bg = context__.vals_r("z_bg")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization","Emin","double",
          context__.to_vec());
      Emin = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      Emin = context__.vals_r("Emin")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization","Emax","double",
          context__.to_vec());
      Emax = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      Emax = context__.vals_r("Emax")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","T","double",
          context__.to_vec());
      T = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      T = context__.vals_r("T")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization","kappa","double",
          context__.to_vec());
      kappa = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      kappa = context__.vals_r("kappa")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization","aeff","double",
          context__.to_vec());
      aeff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      aeff = context__.vals_r("aeff")[(1 - 1)];
      current_statement__ = 56;
      validate_non_negative_index("Etrue", "N", N);
      current_statement__ = 57;
      validate_non_negative_index("log_prob", "N", N);
      current_statement__ = 58;
      validate_non_negative_index("Earr", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "toy_bhm_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ gamma;
      gamma = DUMMY_VAR__;
      
      current_statement__ = 1;
      gamma = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        gamma = stan::math::lub_constrain(gamma, 1, 4, lp__);
      } else {
        current_statement__ = 1;
        gamma = stan::math::lub_constrain(gamma, 1, 4);
      }
      local_scalar_t__ L;
      L = DUMMY_VAR__;
      
      current_statement__ = 2;
      L = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        L = stan::math::lub_constrain(L, 0, 1e55, lp__);
      } else {
        current_statement__ = 2;
        L = stan::math::lub_constrain(L, 0, 1e55);
      }
      local_scalar_t__ F_diff;
      F_diff = DUMMY_VAR__;
      
      current_statement__ = 3;
      F_diff = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        F_diff = stan::math::lub_constrain(F_diff, 0, 1e-5, lp__);
      } else {
        current_statement__ = 3;
        F_diff = stan::math::lub_constrain(F_diff, 0, 1e-5);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> Etrue;
      Etrue = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(Etrue, DUMMY_VAR__);
      
      current_statement__ = 4;
      Etrue = in__.vector(N);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(Etrue, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(Etrue[(sym1__ - 1)], Emin, Emax, lp__),
            "assigning variable Etrue");
        } else {
          current_statement__ = 4;
          assign(Etrue, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(Etrue[(sym1__ - 1)], Emin, Emax),
            "assigning variable Etrue");
        }}
      local_scalar_t__ f;
      f = DUMMY_VAR__;
      
      local_scalar_t__ F_src;
      F_src = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> F;
      F = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(F, DUMMY_VAR__);
      
      local_scalar_t__ Nex;
      Nex = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> eps;
      eps = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(eps, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_prob;
      log_prob = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(log_prob, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Earr;
      Earr = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(Earr, DUMMY_VAR__);
      
      current_statement__ = 12;
      F_src = (L / ((4 * stan::math::pi()) * pow(D, 2)));
      current_statement__ = 13;
      F_src = (F_src * flux_conv(gamma, Emin, Emax, pstream__));
      current_statement__ = 14;
      assign(F, cons_list(index_uni(1), nil_index_list()), F_src,
        "assigning variable F");
      current_statement__ = 15;
      assign(F, cons_list(index_uni(2), nil_index_list()), F_diff,
        "assigning variable F");
      current_statement__ = 16;
      f = (F_src / sum(F));
      current_statement__ = 31;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 17;
        assign(log_prob, cons_list(index_uni(i), nil_index_list()),
          stan::math::log(F), "assigning variable log_prob");
        current_statement__ = 29;
        for (int k = 1; k <= 2; ++k) {
          current_statement__ = 18;
          assign(log_prob,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (log_prob[(i - 1)][(k - 1)] +
              spectrum_lpdf<false>(Etrue[(i - 1)], gamma, Emin,
                Emax, pstream__)), "assigning variable log_prob");
          current_statement__ = 26;
          if (logical_eq(k, 1)) {
            current_statement__ = 23;
            assign(Earr, cons_list(index_uni(i), nil_index_list()),
              (Etrue[(i - 1)] / (1 + z)), "assigning variable Earr");
            current_statement__ = 24;
            assign(log_prob,
              cons_list(index_uni(i),
                cons_list(index_uni(k), nil_index_list())),
              (log_prob[(i - 1)][(k - 1)] +
                vMF_lpdf<false>(det_dir[(i - 1)], source_dir,
                  kappa, pstream__)), "assigning variable log_prob");
          } else {
            current_statement__ = 22;
            if (logical_eq(k, 2)) {
              current_statement__ = 19;
              assign(Earr, cons_list(index_uni(i), nil_index_list()),
                (Etrue[(i - 1)] / (1 + z_bg)), "assigning variable Earr");
              current_statement__ = 20;
              assign(log_prob,
                cons_list(index_uni(i),
                  cons_list(index_uni(k), nil_index_list())),
                (log_prob[(i - 1)][(k - 1)] +
                  stan::math::log((1 / (4 * stan::math::pi())))),
                "assigning variable log_prob");
            } 
          }
          current_statement__ = 27;
          assign(log_prob,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (log_prob[(i - 1)][(k - 1)] +
              lognormal_lpdf<false>(Edet[(i - 1)],
                stan::math::log(Earr[(i - 1)]), 0.5)),
            "assigning variable log_prob");}}
      current_statement__ = 32;
      assign(eps, nil_index_list(),
        get_exposure_factor(gamma, T, aeff, z, z_bg, pstream__),
        "assigning variable eps");
      current_statement__ = 33;
      Nex = get_Nex(F, eps, pstream__);
      current_statement__ = 5;
      current_statement__ = 5;
      check_greater_or_equal(function__, "f", f, 0);
      current_statement__ = 5;
      current_statement__ = 5;
      check_less_or_equal(function__, "f", f, 1);
      {
        current_statement__ = 36;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 34;
          lp_accum__.add(log_sum_exp(log_prob[(i - 1)]));}
        current_statement__ = 37;
        lp_accum__.add(-Nex);
        current_statement__ = 38;
        if (pstream__) {
          stan_print(pstream__, Nex);
          stan_print(pstream__, "\n");
        }
        current_statement__ = 39;
        lp_accum__.add(lognormal_lpdf<propto__>(L, stan::math::log(1e51), 5));
        current_statement__ = 40;
        lp_accum__.add(
          lognormal_lpdf<propto__>(F_diff, stan::math::log(1e-6), 5));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(gamma, 2, 2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "toy_bhm_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma = in__.scalar();
      current_statement__ = 1;
      gamma = stan::math::lub_constrain(gamma, 1, 4);
      double L;
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      L = in__.scalar();
      current_statement__ = 2;
      L = stan::math::lub_constrain(L, 0, 1e55);
      double F_diff;
      F_diff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      F_diff = in__.scalar();
      current_statement__ = 3;
      F_diff = stan::math::lub_constrain(F_diff, 0, 1e-5);
      Eigen::Matrix<double, -1, 1> Etrue;
      Etrue = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Etrue, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      Etrue = in__.vector(N);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        assign(Etrue, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(Etrue[(sym1__ - 1)], Emin, Emax),
          "assigning variable Etrue");}
      double f;
      f = std::numeric_limits<double>::quiet_NaN();
      
      double F_src;
      F_src = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> F;
      F = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(F, std::numeric_limits<double>::quiet_NaN());
      
      double Nex;
      Nex = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> eps;
      eps = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(eps, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> log_prob;
      log_prob = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(log_prob, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Earr;
      Earr = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Earr, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(gamma);
      vars__.emplace_back(L);
      vars__.emplace_back(F_diff);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Etrue[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      F_src = (L / ((4 * stan::math::pi()) * pow(D, 2)));
      current_statement__ = 13;
      F_src = (F_src * flux_conv(gamma, Emin, Emax, pstream__));
      current_statement__ = 14;
      assign(F, cons_list(index_uni(1), nil_index_list()), F_src,
        "assigning variable F");
      current_statement__ = 15;
      assign(F, cons_list(index_uni(2), nil_index_list()), F_diff,
        "assigning variable F");
      current_statement__ = 16;
      f = (F_src / sum(F));
      current_statement__ = 31;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 17;
        assign(log_prob, cons_list(index_uni(i), nil_index_list()),
          stan::math::log(F), "assigning variable log_prob");
        current_statement__ = 29;
        for (int k = 1; k <= 2; ++k) {
          current_statement__ = 18;
          assign(log_prob,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (log_prob[(i - 1)][(k - 1)] +
              spectrum_lpdf<false>(Etrue[(i - 1)], gamma, Emin,
                Emax, pstream__)), "assigning variable log_prob");
          current_statement__ = 26;
          if (logical_eq(k, 1)) {
            current_statement__ = 23;
            assign(Earr, cons_list(index_uni(i), nil_index_list()),
              (Etrue[(i - 1)] / (1 + z)), "assigning variable Earr");
            current_statement__ = 24;
            assign(log_prob,
              cons_list(index_uni(i),
                cons_list(index_uni(k), nil_index_list())),
              (log_prob[(i - 1)][(k - 1)] +
                vMF_lpdf<false>(det_dir[(i - 1)], source_dir,
                  kappa, pstream__)), "assigning variable log_prob");
          } else {
            current_statement__ = 22;
            if (logical_eq(k, 2)) {
              current_statement__ = 19;
              assign(Earr, cons_list(index_uni(i), nil_index_list()),
                (Etrue[(i - 1)] / (1 + z_bg)), "assigning variable Earr");
              current_statement__ = 20;
              assign(log_prob,
                cons_list(index_uni(i),
                  cons_list(index_uni(k), nil_index_list())),
                (log_prob[(i - 1)][(k - 1)] +
                  stan::math::log((1 / (4 * stan::math::pi())))),
                "assigning variable log_prob");
            } 
          }
          current_statement__ = 27;
          assign(log_prob,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (log_prob[(i - 1)][(k - 1)] +
              lognormal_lpdf<false>(Edet[(i - 1)],
                stan::math::log(Earr[(i - 1)]), 0.5)),
            "assigning variable log_prob");}}
      current_statement__ = 32;
      assign(eps, nil_index_list(),
        get_exposure_factor(gamma, T, aeff, z, z_bg, pstream__),
        "assigning variable eps");
      current_statement__ = 33;
      Nex = get_Nex(F, eps, pstream__);
      current_statement__ = 5;
      current_statement__ = 5;
      check_greater_or_equal(function__, "f", f, 0);
      current_statement__ = 5;
      current_statement__ = 5;
      check_less_or_equal(function__, "f", f, 1);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(f);
        vars__.emplace_back(F_src);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(F[(sym1__ - 1)]);}
        vars__.emplace_back(Nex);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(eps[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(log_prob[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(Earr[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      double gamma_free__;
      gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma_free__ = stan::math::lub_free(gamma, 1, 4);
      double L;
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      L = context__.vals_r("L")[(1 - 1)];
      double L_free__;
      L_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      L_free__ = stan::math::lub_free(L, 0, 1e55);
      double F_diff;
      F_diff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      F_diff = context__.vals_r("F_diff")[(1 - 1)];
      double F_diff_free__;
      F_diff_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      F_diff_free__ = stan::math::lub_free(F_diff, 0, 1e-5);
      Eigen::Matrix<double, -1, 1> Etrue;
      Etrue = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Etrue, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Etrue_flat__;
        current_statement__ = 4;
        assign(Etrue_flat__, nil_index_list(), context__.vals_r("Etrue"),
          "assigning variable Etrue_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          assign(Etrue, cons_list(index_uni(sym1__), nil_index_list()),
            Etrue_flat__[(pos__ - 1)], "assigning variable Etrue");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> Etrue_free__;
      Etrue_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Etrue_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        assign(Etrue_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(Etrue[(sym1__ - 1)], Emin, Emax),
          "assigning variable Etrue_free__");}
      vars__.emplace_back(gamma_free__);
      vars__.emplace_back(L_free__);
      vars__.emplace_back(F_diff_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Etrue_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("gamma");
    names__.emplace_back("L");
    names__.emplace_back("F_diff");
    names__.emplace_back("Etrue");
    names__.emplace_back("f");
    names__.emplace_back("F_src");
    names__.emplace_back("F");
    names__.emplace_back("Nex");
    names__.emplace_back("eps");
    names__.emplace_back("log_prob");
    names__.emplace_back("Earr");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "L");
    param_names__.emplace_back(std::string() + "F_diff");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Etrue" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "f");
      param_names__.emplace_back(std::string() + "F_src");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "F" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "Nex");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eps" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Earr" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "L");
    param_names__.emplace_back(std::string() + "F_diff");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Etrue" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "f");
      param_names__.emplace_back(std::string() + "F_src");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "F" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "Nex");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eps" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Earr" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_diff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Etrue\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"F_src\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"F\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nex\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_prob\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Earr\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_diff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Etrue\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"F_src\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"F\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nex\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_prob\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Earr\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = toy_bhm_model_namespace::toy_bhm_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return toy_bhm_model_namespace::profiles__;
}

#endif


